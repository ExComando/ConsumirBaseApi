@page "/v_cliente"
@using App_Empresa.Components.Data;
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Formulario  de Clientes</h1>

@if (getClienteError || iclientes is null)
{
    <p>No se encontro la API...</p>
}
else
{
     <form>
      <label for="lbl_id" class="form-label">ID</label>
      <input @bind="var_idcliente" type="text" class="form-control" placeholder="ID">
      <label for="lbl_nombre" class="form-label">Nombres</label>
      <input @bind="var_nombre" type="text" class="form-control"  placeholder="Ejemplo: Nombre 1  Nombre 2">
      <label for="lbl_apellido" class="form-label">Apellidos</label>
      <input @bind="var_apellido" type="text" class="form-control"  placeholder="Ejemplo: Apellido 1  Apellido 2">
      <label for="lbl_direccion" class="form-label">Direccion</label>
      <input @bind="var_direccion" type="text" class="form-control"  placeholder="Ejemplo: #casa calle avenida lugar">
      <label for="lbl_telefono" class="form-label">Telefono</label>
      <input @bind="var_telefono" type="text" class="form-control"  placeholder="Ejemplo: 5555222">
      <label for="lbl_fn" class="form-label">Fecha Nacimiento</label>
      <input @bind="var_fn" type="date" class="form-control"  placeholder="YYYY-MM-dd">
      <br>
      <button type="button" @onclick="Crear" class="btn btn-info">Crear</button>
      <button type="button" @onclick="Modificar" class="btn btn-success">Modificar</button>
      <button type="button" @onclick="Eliminar" class="btn btn-danger">Eliminar</button>
     
      <br>
     </form>

    <table class="table">
        <tbody>
            <tr>
                <th></th>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th>Direccion</th>
                <th>Telefono</th>
                <th>Fecha Nacimiento</th>
            </tr>
        </tbody>
        @foreach (var cliente in iclientes)
        {
            <tr>
            <td><button type="button" class="btn btn-info"><i class="oi oi-pencil"></i></button></td>          
            <td>@cliente.Nombre</td>
            <td>@cliente.Apellido</td>
            <td>@cliente.Direccion</td>
            <td>@cliente.Telefono</td>
            <td>@cliente.Fecha_nacimiento</td>
            </tr>
        }
    </table>
}
@code {

    // variables
    private string? url = "http://localhost:5042/api/Clientes";    
    private Int32 var_idcliente;   
    private string? var_nombre ,var_apellido,var_direccion,var_telefono;
    private DateTime? var_fn;    

    // Enviar Parametros a variables locales
   // void enviarParametros(Int32 id,string? nom,string? ape,string? dir, string? tel, DateTime? f) {

   // var_idcliente = id;
  //  var_nombre = nom;
  //  var_apellido = ape;
  //  var_direccion = dir;
  //  var_telefono = tel;
  //  var_fn = f; 
    
   // }
    //Crear
   
    private async Task Crear()
    {
        var client = ClientFactory.CreateClient(); 
        var addItem = new Cliente {Id_cliente=var_idcliente,Nombre=var_nombre,Apellido=var_apellido,Direccion=var_direccion,Telefono=var_telefono,Fecha_nacimiento=var_fn };
        await client.PostAsJsonAsync(url, addItem);        
        await OnInitializedAsync();
    }

     // Actualizar
    private async Task Modificar()
    {
        var client = ClientFactory.CreateClient(); 
        var addItem = new Cliente { Id_cliente=var_idcliente,Nombre=var_nombre,Apellido=var_apellido,Direccion = var_direccion,Telefono=var_telefono,Fecha_nacimiento=var_fn };
        await client.PutAsJsonAsync($"{url}/{var_idcliente}", addItem);       
        await OnInitializedAsync();
    }
     // Eliminar
     private async Task Eliminar()
    {
        var client = ClientFactory.CreateClient(); 
        await client.DeleteAsync($"{url}/{var_idcliente}");       
        await OnInitializedAsync();
    }


    private IEnumerable<Cliente>? iclientes = [];
    private bool getClienteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            url);
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            iclientes = await JsonSerializer.DeserializeAsync
                <IEnumerable<Cliente>>(responseStream);
        }
        else
        {
            getClienteError = true;
        }

        shouldRender = true;
    }

   

    
    
    
}